{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bae8b86b-6434-43f3-9f64-6cb43d9309ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import openai\n",
    "import os\n",
    "from dotenv import load_dotenv\n",
    "from datetime import datetime\n",
    "\n",
    "load_dotenv()\n",
    "\n",
    "# OpenAI API Key (Replace with environment variable for security)\n",
    "openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n",
    "\n",
    "EXIT_KEYWORDS = {\"exit\", \"quit\", \"stop\", \"end\", \"goodbye\"}\n",
    "\n",
    "def generate_gpt3_response(prompt):\n",
    "    try:\n",
    "        response = openai.ChatCompletion.create(\n",
    "            model=\"gpt-3.5-turbo\",\n",
    "            messages=[\n",
    "                {\"role\": \"system\", \"content\": \"You are a hiring assistant that gathers candidate information and assesses technical proficiency.\"},\n",
    "                {\"role\": \"user\", \"content\": prompt}\n",
    "            ]\n",
    "        )\n",
    "        return response[\"choices\"][0][\"message\"][\"content\"].strip()\n",
    "    except Exception as e:\n",
    "        return \"I'm sorry, but I couldn't process your request at the moment. Please try again later.\"\n",
    "\n",
    "# Streamlit UI\n",
    "def main():\n",
    "    st.title(\"TalentScout Hiring Assistant\")\n",
    "    st.write(\"Welcome! I will guide you through an initial screening process to assess your technical skills.\")\n",
    "    \n",
    "    name = st.text_input(\"Enter your name:\")\n",
    "    experience = st.number_input(\"Years of experience:\", min_value=0, max_value=50, step=1)\n",
    "    tech_stack = st.text_area(\"List your tech stack (e.g., Python, TensorFlow, MySQL):\")\n",
    "    \n",
    "    if st.button(\"Start Assessment\"):\n",
    "        if not name:\n",
    "            st.error(\"Please enter your name.\")\n",
    "            return\n",
    "        if not experience:\n",
    "            st.error(\"Please specify your years of experience.\")\n",
    "            return\n",
    "        if not tech_stack:\n",
    "            st.error(\"Please list at least one technology you are proficient in.\")\n",
    "            return\n",
    "        \n",
    "        tech_list = [tech.strip() for tech in tech_stack.split(',')]\n",
    "        prompt = (\n",
    "            f\"The candidate has {experience} years of experience and is skilled in {', '.join(tech_list)}. \"\n",
    "            f\"Generate 3-5 technical interview questions tailored to assess their proficiency in each of these technologies. \"\n",
    "            f\"Ensure the questions cover fundamental, intermediate, and advanced aspects relevant to their experience level.\"\n",
    "        )\n",
    "        questions = generate_gpt3_response(prompt)\n",
    "        \n",
    "        if \"I'm sorry\" in questions:\n",
    "            st.error(\"There was an issue generating questions. Please try again later.\")\n",
    "        else:\n",
    "            st.success(f\"Hello {name}, here are your technical questions:\")\n",
    "            for q in questions.split('\\n'):\n",
    "                st.write(f\"- {q}\")\n",
    "    \n",
    "    if st.button(\"Exit Chat\"):\n",
    "        st.write(\"Thank you for using TalentScout Hiring Assistant. Goodbye!\")\n",
    "        st.stop()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
